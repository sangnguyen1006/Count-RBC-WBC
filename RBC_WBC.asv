function varargout = RBC_WBC(varargin)
% RBC_WBC MATLAB code for RBC_WBC.fig
%      RBC_WBC, by itself, creates a new RBC_WBC or raises the existing
%      singleton*.
%
%      H = RBC_WBC returns the handle to a new RBC_WBC or the handle to
%      the existing singleton*.
%
%      RBC_WBC('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in RBC_WBC.M with the given input arguments.
%
%      RBC_WBC('Property','Value',...) creates a new RBC_WBC or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before RBC_WBC_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to RBC_WBC_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help RBC_WBC

% Last Modified by GUIDE v2.5 16-Oct-2021 17:18:16

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @RBC_WBC_OpeningFcn, ...
                   'gui_OutputFcn',  @RBC_WBC_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before RBC_WBC is made visible.
function RBC_WBC_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to RBC_WBC (see VARARGIN)

% Choose default command line output for RBC_WBC
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes RBC_WBC wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = RBC_WBC_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;



function edit1_Callback(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit1 as text
%        str2double(get(hObject,'String')) returns contents of edit1 as a double


% --- Executes during object creation, after setting all properties.
function edit1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit2_Callback(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit2 as text
%        str2double(get(hObject,'String')) returns contents of edit2 as a double


% --- Executes during object creation, after setting all properties.
function edit2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global RGB GRAY HSV
[filename, pathname]=uigetfile({'*.jpg;*.png;*.dcm;*.bmp;*.gif'});
RGB=imread(strcat(pathname,filename));

if size(RGB,3)==3
    GRAY= rgb2gray(RGB);
    HSV= rgb2hsv(RGB);
end
axes(handles.axes1);
imshow(RGB);

% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global RGB GRAY HSV
%% Convert to binarize image
GRAY=adapthisteq(GRAY);
S=HSV(:,:,2);                             % S-Channel 

GRAYb= imbinarize(GRAY,graythresh(GRAY)); % Global image threshold using Otsu's method
Sb = imbinarize(S,graythresh(S));         % Global image threshold using Otsu's method
se = strel('disk',30);                    % Specify a radius of 5 pixels so that the largest gap gets filled.
Sb= imclose(Sb,se);  

%% Segmentation WBC,Plateles
Platelets= bwareafilt(Sb,[0 1500]);       % take area (0-1000 pixels)
WBC =bwareaopen(Sb,1500);                 % removal Platelets (area<1000 pixels)

%% Segmentation RBC
%preRBC=abs(Sb-(~GRAYb)); % removal WBCs
preRBC=~GRAYb-Sb;
for i=1:size(preRBC,1)
    for j=1:size(preRBC,2)
        if preRBC(i,j)<0
            preRBC(i,j)=0;
        end
    end
end

RBC= bwareaopen(preRBC,400);              % reducing noise(area<400 pixels)
se = strel('disk',5);                     % Specify a radius of 5 pixels so that the largest gap gets filled.
RBC= imclose(RBC,se);                     % smooth with the shape of disk

RBC= imfill(RBC,'holes');                 % filling holses
%RBC =bwareaopen(RBC,1000);               % removal Platelets (area<1000 pixels)

%% Hough transform method
% Rmax, Rmin 
[B,L] = bwboundaries(RBC,'noholes');      % tim duong bien
STATS = regionprops(L, 'all');
C0=zeros(size(B,1),1);                    % khoi tao ma tran 0
for i=1:size(B,1) 
    C0(i)=(STATS(i).Perimeter)^2/STATS(i).Area; % do nen
end
number=1:1:length(C0);
for i=1:length(C0)-1                      % sort
    for j=i+1:length(C0)
        if C0(j)<C0(i)
            tam=C0(j);
            C0(j)=C0(i);
            C0(i)=tam; 
            
            tam=number(j);
            number(j)=number(i);
            number(i)=tam;
        end
    end
end
for i=1:length(C0)                        % xac dinh hinh dang tron 14<=C0<15
    if C0(i)>=15
        mark=i-1;
        break;
    end
end
R=zeros(mark,1);
for i=1:mark
    R(i)=(2*STATS(number(i)).Area)/STATS(number(i)).Perimeter; % tinh R
end
R=sort(R);

Rmax=R(length(R));
Raverage=sum(R)/length(R);
Rmin=round(Raverage-Raverage*0.3);
Rmax=round(Rmax+Rmax*0.2+(Rmax-Raverage)*0.2);
%Hough transform 
[center, radius, metric] = imfindcircles(RBC, [Rmin,Rmax], ...
    'ObjectPolarity','bright','Sensitivity',0.85);

%% Watershed method
% tao hinh anh RBC chua nhan dien duoc
RBC_watershed1=RBC;
for k=1:size(center,1)
    R=radius(k);
    x0=center(k,1);
    y0=center(k,2);
    for i=1:size(RBC_watershed1,1)
        for j=1:size(RBC_watershed1,2)
            y=i;
            x=j;
            if (RBC_watershed1(i,j)==1)&&(sqrt((x-x0)^2+(y-y0)^2)<=R)
                RBC_watershed1(i,j)=0;
            end
        end
    end
end
%RBC_watershed1=bwareaopen(RBC_watershed1,1000); 
% Watershed
D = bwdist(~RBC_watershed1);
D = -D;
D = imgaussfilt(D, 10);
L = watershed(D);
L(~RBC_watershed1) = 0;
RBC_watershed2 = L > 0;
% tim nguong dien tich phan biet RBC voi nhieu
[B,L] = bwboundaries(RBC_watershed2,'noholes');        % tim duong bien
STATS = regionprops(RBC_watershed2, 'all');            % chi lay Area
area=zeros(size(B,1),1);
for i=1:size(B,1)
    area(i)=STATS(i).Area;
end
area=sort(area);
breakpoint=clustering(area);              % nguong cua phan nhom du lieu
areathreshold=area(breakpoint+1);         % nguong dien tich

%% Couting RBC, WBC, mask into 2-D image
s=size(center);                           % Couting RBC

n=bwconncomp(WBC);                        % Find connected components in binary image
numberWBC=n.NumObjects;                   % Couting WBC

Outline=bwperim(WBC);                     % Find perimeter of objects in binary image
Ed = imdilate(Outline,ones(4,4));         % Dilate image
WBCoverlay=imoverlay(RGB,Ed,'g');         % Burn binary mask into 2-D image

%% Imshow images and results
axes(handles.axes2);
imshow(WBCoverlay);
anomalous_RBC=0;
% phat hien RBC bat thuong, chong lap
for i=1:size(B,1) 
    if STATS(i).Area>=areathreshold  
        C0=(STATS(i).Perimeter)^2/STATS(i).Area;
        %if (C0>=14)&&(C0<=27)
            plot(B{i}(:,2), B{i}(:,1), 'LineWidth',3,'Color', 'blue'); % duong bien
            anomalous_RBC=anomalous_RBC+1;
        %end
    end
end
viscircles(center, radius,'LineStyle','-');                            % mask into 2-D image
total_RBC=s(1)+ anomalous_RBC;
set(handles.edit1, 'String', num2str(total_RBC));
set(handles.edit2, 'String', num2str(numberWBC));


% --- Executes on button press in pushbutton3.
function pushbutton3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
axes(handles.axes1); cla;
axes(handles.axes2); cla;
set(handles.edit1,'String','');
set(handles.edit2,'String','');